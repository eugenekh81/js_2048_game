{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["var $09e991522ca7e64e$exports = {};\n\"use strict\";\nconst $09e991522ca7e64e$var$refs = {\n    tiles: document.querySelectorAll(\".field-cell\"),\n    startBtn: document.querySelector(\".start\"),\n    gameScore: document.querySelector(\".game-score\"),\n    gameStartMsg: document.querySelector(\".message-start\"),\n    gameOverMsg: document.querySelector(\".message-lose\"),\n    gameWonMsg: document.querySelector(\".message-win\")\n};\nconst $09e991522ca7e64e$var$NUMBER_OF_ROWS = 4;\nconst $09e991522ca7e64e$var$NUMBER_OF_CELLS = 4;\nconst $09e991522ca7e64e$var$WIN_VALUE = 2048;\nlet $09e991522ca7e64e$var$boardValues = $09e991522ca7e64e$var$getFieldValues();\n$09e991522ca7e64e$var$refs.startBtn.addEventListener(\"click\", $09e991522ca7e64e$var$startGame);\nfunction $09e991522ca7e64e$var$startGame() {\n    window.removeEventListener(\"keyup\", $09e991522ca7e64e$var$moveTiles);\n    $09e991522ca7e64e$var$clearGameField();\n    $09e991522ca7e64e$var$refs.gameStartMsg.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$refs.gameOverMsg.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$refs.gameWonMsg.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$refs.startBtn.classList.remove(\"start\");\n    $09e991522ca7e64e$var$refs.startBtn.classList.add(\"restart\");\n    $09e991522ca7e64e$var$refs.startBtn.textContent = \"Restart\";\n    $09e991522ca7e64e$var$refs.gameScore.textContent = 0;\n    window.addEventListener(\"keyup\", $09e991522ca7e64e$var$moveTiles);\n    $09e991522ca7e64e$var$generateRandomTiles(2);\n}\nfunction $09e991522ca7e64e$var$generateRandomTiles(numberOfTiles) {\n    let generated = 0;\n    while(generated < numberOfTiles){\n        const randomTileIndex = Math.floor(Math.random() * $09e991522ca7e64e$var$refs.tiles.length);\n        const tile = $09e991522ca7e64e$var$refs.tiles[randomTileIndex];\n        if (!tile.textContent) {\n            const number = Math.random() >= 0.9 ? 4 : 2;\n            $09e991522ca7e64e$var$updateTile(tile, number);\n            generated++;\n        }\n    }\n}\nfunction $09e991522ca7e64e$var$hasMoves(array) {\n    for(let r = 0; r < $09e991522ca7e64e$var$NUMBER_OF_ROWS; r++)for(let c = 0; c < $09e991522ca7e64e$var$NUMBER_OF_CELLS - 1; c++){\n        if (array[r][c] === array[r][c + 1]) return true;\n    }\n    return false;\n}\nfunction $09e991522ca7e64e$var$canMove(array) {\n    const rotatedArray = $09e991522ca7e64e$var$rotateArray(array);\n    const emptyCells = $09e991522ca7e64e$var$hasEmptyTiles(array);\n    const canMoveHorizontally = $09e991522ca7e64e$var$hasMoves(array);\n    const canMoveVertically = $09e991522ca7e64e$var$hasMoves(rotatedArray);\n    return emptyCells || canMoveHorizontally || canMoveVertically;\n}\nfunction $09e991522ca7e64e$var$getFieldValues() {\n    let currentCellIndex = 0;\n    const values = [];\n    for(let r = 0; r < $09e991522ca7e64e$var$NUMBER_OF_ROWS; r++){\n        if (!values[r]) values[r] = [];\n        for(let c = 0; c < $09e991522ca7e64e$var$NUMBER_OF_CELLS; c++){\n            values[r].push(+$09e991522ca7e64e$var$refs.tiles[currentCellIndex].textContent || 0);\n            currentCellIndex++;\n        }\n    }\n    return values;\n}\nfunction $09e991522ca7e64e$var$updateTile(tile, number) {\n    tile.textContent = number || \"\";\n    tile.className = `field-cell field-cell--${number}`;\n}\nfunction $09e991522ca7e64e$var$moveTiles(e) {\n    if (e.key !== \"ArrowLeft\" && e.key !== \"ArrowRight\" && e.key !== \"ArrowUp\" && e.key !== \"ArrowDown\") return;\n    $09e991522ca7e64e$var$boardValues = $09e991522ca7e64e$var$getFieldValues();\n    let slideResult;\n    let moved = false;\n    let hasMoreMoves = true;\n    switch(e.key){\n        case \"ArrowLeft\":\n            slideResult = $09e991522ca7e64e$var$slideLeft($09e991522ca7e64e$var$boardValues);\n            break;\n        case \"ArrowRight\":\n            slideResult = $09e991522ca7e64e$var$slideRight($09e991522ca7e64e$var$boardValues);\n            break;\n        case \"ArrowUp\":\n            slideResult = $09e991522ca7e64e$var$rotateArray($09e991522ca7e64e$var$slideLeft($09e991522ca7e64e$var$rotateArray($09e991522ca7e64e$var$boardValues)));\n            break;\n        case \"ArrowDown\":\n            slideResult = $09e991522ca7e64e$var$rotateArray($09e991522ca7e64e$var$slideRight($09e991522ca7e64e$var$rotateArray($09e991522ca7e64e$var$boardValues)));\n            break;\n    }\n    if (!$09e991522ca7e64e$var$checkIfEqual($09e991522ca7e64e$var$boardValues, slideResult)) {\n        $09e991522ca7e64e$var$updateTiles(slideResult);\n        moved = true;\n    }\n    if (moved && $09e991522ca7e64e$var$isGameWon()) {\n        $09e991522ca7e64e$var$refs.gameWonMsg.classList.remove(\"hidden\");\n        window.removeEventListener(\"keyup\", $09e991522ca7e64e$var$moveTiles);\n        return;\n    }\n    if (moved) $09e991522ca7e64e$var$generateRandomTiles(1);\n    $09e991522ca7e64e$var$boardValues = $09e991522ca7e64e$var$getFieldValues();\n    hasMoreMoves = $09e991522ca7e64e$var$hasEmptyTiles($09e991522ca7e64e$var$boardValues) || $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$boardValues);\n    if (!hasMoreMoves) {\n        $09e991522ca7e64e$var$refs.gameOverMsg.classList.remove(\"hidden\");\n        window.removeEventListener(\"keyup\", $09e991522ca7e64e$var$moveTiles);\n    }\n}\nfunction $09e991522ca7e64e$var$checkIfEqual(original, updated) {\n    if (original.length !== updated.length) return false;\n    for(let r = 0; r < $09e991522ca7e64e$var$NUMBER_OF_ROWS; r++)for(let c = 0; c < $09e991522ca7e64e$var$NUMBER_OF_CELLS; c++){\n        if (original[r][c] !== updated[r][c]) return false;\n    }\n    return true;\n}\nfunction $09e991522ca7e64e$var$slideLeft(array) {\n    const transformedValues = [];\n    for(let r = 0; r < $09e991522ca7e64e$var$NUMBER_OF_ROWS; r++){\n        let row = $09e991522ca7e64e$var$removeZeroes(array[r]);\n        for(let c = 0; c < $09e991522ca7e64e$var$NUMBER_OF_CELLS - 1; c++)if (row[c] && row[c] === row[c + 1]) {\n            row[c] *= 2;\n            row[c + 1] = 0;\n            $09e991522ca7e64e$var$refs.gameScore.textContent = +$09e991522ca7e64e$var$refs.gameScore.textContent + +row[c];\n        }\n        row = $09e991522ca7e64e$var$removeZeroes(row);\n        row = $09e991522ca7e64e$var$addZeroes(row);\n        transformedValues.push(row);\n    }\n    return transformedValues;\n}\nfunction $09e991522ca7e64e$var$slideRight(array) {\n    const transformedValues = [];\n    for(let r = 0; r < $09e991522ca7e64e$var$NUMBER_OF_ROWS; r++){\n        let row = $09e991522ca7e64e$var$removeZeroes(array[r]).reverse();\n        for(let c = 0; c < $09e991522ca7e64e$var$NUMBER_OF_CELLS - 1; c++)if (row[c] && row[c] === row[c + 1]) {\n            row[c] *= 2;\n            row[c + 1] = 0;\n            $09e991522ca7e64e$var$refs.gameScore.textContent = +$09e991522ca7e64e$var$refs.gameScore.textContent + +row[c];\n        }\n        row = $09e991522ca7e64e$var$removeZeroes(row);\n        row = $09e991522ca7e64e$var$addZeroes(row).reverse();\n        transformedValues.push(row);\n    }\n    return transformedValues;\n}\nfunction $09e991522ca7e64e$var$rotateArray(array) {\n    const rotadedArray = [];\n    for(let c = 0; c < $09e991522ca7e64e$var$NUMBER_OF_CELLS; c++)for(let r = 0; r < $09e991522ca7e64e$var$NUMBER_OF_ROWS; r++){\n        if (!rotadedArray[c]) rotadedArray[c] = [];\n        rotadedArray[c].push(array[r][c]);\n    }\n    return rotadedArray;\n}\nfunction $09e991522ca7e64e$var$removeZeroes(array) {\n    return array.filter((item)=>item && item > 0);\n}\nfunction $09e991522ca7e64e$var$addZeroes(row) {\n    for(let c = 0; c < $09e991522ca7e64e$var$NUMBER_OF_CELLS; c++)if (!row[c]) row.push(0);\n    return row;\n}\nfunction $09e991522ca7e64e$var$hasEmptyTiles(array) {\n    return array.flatMap((el)=>el).filter((tile)=>tile === 0).length > 0;\n}\nfunction $09e991522ca7e64e$var$updateTiles(array) {\n    let currentTile = 0;\n    for(let r = 0; r < $09e991522ca7e64e$var$NUMBER_OF_ROWS; r++)for(let c = 0; c < $09e991522ca7e64e$var$NUMBER_OF_CELLS; c++){\n        $09e991522ca7e64e$var$updateTile($09e991522ca7e64e$var$refs.tiles[currentTile], array[r][c]);\n        currentTile++;\n    }\n}\nfunction $09e991522ca7e64e$var$clearGameField() {\n    [\n        ...$09e991522ca7e64e$var$refs.tiles\n    ].forEach((tile)=>{\n        tile.textContent = \"\";\n        tile.className = \"field-cell\";\n    });\n}\nfunction $09e991522ca7e64e$var$isGameWon() {\n    return [\n        ...$09e991522ca7e64e$var$refs.tiles\n    ].some((tile)=>+tile.textContent === $09e991522ca7e64e$var$WIN_VALUE);\n}\n\n\n//# sourceMappingURL=index.aa60c615.js.map\n","'use strict';\n\nconst refs = {\n  tiles: document.querySelectorAll('.field-cell'),\n  startBtn: document.querySelector('.start'),\n  gameScore: document.querySelector('.game-score'),\n  gameStartMsg: document.querySelector('.message-start'),\n  gameOverMsg: document.querySelector('.message-lose'),\n  gameWonMsg: document.querySelector('.message-win'),\n};\n\nconst NUMBER_OF_ROWS = 4;\nconst NUMBER_OF_CELLS = 4;\nconst WIN_VALUE = 2048;\nlet boardValues = getFieldValues();\n\nrefs.startBtn.addEventListener('click', startGame);\n\nfunction startGame() {\n  window.removeEventListener('keyup', moveTiles);\n  clearGameField();\n\n  refs.gameStartMsg.classList.add('hidden');\n  refs.gameOverMsg.classList.add('hidden');\n  refs.gameWonMsg.classList.add('hidden');\n  refs.startBtn.classList.remove('start');\n  refs.startBtn.classList.add('restart');\n  refs.startBtn.textContent = 'Restart';\n  refs.gameScore.textContent = 0;\n\n  window.addEventListener('keyup', moveTiles);\n\n  generateRandomTiles(2);\n}\n\nfunction generateRandomTiles(numberOfTiles) {\n  let generated = 0;\n\n  while (generated < numberOfTiles) {\n    const randomTileIndex = Math.floor(Math.random() * refs.tiles.length);\n\n    const tile = refs.tiles[randomTileIndex];\n\n    if (!tile.textContent) {\n      const number = Math.random() >= 0.9 ? 4 : 2;\n\n      updateTile(tile, number);\n      generated++;\n    }\n  }\n}\n\nfunction hasMoves(array) {\n  for (let r = 0; r < NUMBER_OF_ROWS; r++) {\n    for (let c = 0; c < NUMBER_OF_CELLS - 1; c++) {\n      if (array[r][c] === array[r][c + 1]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction canMove(array) {\n  const rotatedArray = rotateArray(array);\n  const emptyCells = hasEmptyTiles(array);\n\n  const canMoveHorizontally = hasMoves(array);\n  const canMoveVertically = hasMoves(rotatedArray);\n\n  return emptyCells || canMoveHorizontally || canMoveVertically;\n}\n\nfunction getFieldValues() {\n  let currentCellIndex = 0;\n  const values = [];\n\n  for (let r = 0; r < NUMBER_OF_ROWS; r++) {\n    if (!values[r]) {\n      values[r] = [];\n    }\n\n    for (let c = 0; c < NUMBER_OF_CELLS; c++) {\n      values[r].push(+refs.tiles[currentCellIndex].textContent || 0);\n      currentCellIndex++;\n    }\n  }\n\n  return values;\n}\n\nfunction updateTile(tile, number) {\n  tile.textContent = number || '';\n  tile.className = `field-cell field-cell--${number}`;\n}\n\nfunction moveTiles(e) {\n  if (\n    e.key !== 'ArrowLeft'\n    && e.key !== 'ArrowRight'\n    && e.key !== 'ArrowUp'\n    && e.key !== 'ArrowDown'\n  ) {\n    return;\n  }\n\n  boardValues = getFieldValues();\n\n  let slideResult;\n  let moved = false;\n  let hasMoreMoves = true;\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      slideResult = slideLeft(boardValues);\n      break;\n\n    case 'ArrowRight':\n      slideResult = slideRight(boardValues);\n\n      break;\n\n    case 'ArrowUp':\n      slideResult = rotateArray(slideLeft(rotateArray(boardValues)));\n\n      break;\n\n    case 'ArrowDown':\n      slideResult = rotateArray(slideRight(rotateArray(boardValues)));\n      break;\n  }\n\n  if (!checkIfEqual(boardValues, slideResult)) {\n    updateTiles(slideResult);\n    moved = true;\n  }\n\n  if (moved && isGameWon()) {\n    refs.gameWonMsg.classList.remove('hidden');\n    window.removeEventListener('keyup', moveTiles);\n\n    return;\n  }\n\n  if (moved) {\n    generateRandomTiles(1);\n  }\n\n  boardValues = getFieldValues();\n\n  hasMoreMoves = hasEmptyTiles(boardValues) || canMove(boardValues);\n\n  if (!hasMoreMoves) {\n    refs.gameOverMsg.classList.remove('hidden');\n    window.removeEventListener('keyup', moveTiles);\n  }\n}\n\nfunction checkIfEqual(original, updated) {\n  if (original.length !== updated.length) {\n    return false;\n  }\n\n  for (let r = 0; r < NUMBER_OF_ROWS; r++) {\n    for (let c = 0; c < NUMBER_OF_CELLS; c++) {\n      if (original[r][c] !== updated[r][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction slideLeft(array) {\n  const transformedValues = [];\n\n  for (let r = 0; r < NUMBER_OF_ROWS; r++) {\n    let row = removeZeroes(array[r]);\n\n    for (let c = 0; c < NUMBER_OF_CELLS - 1; c++) {\n      if (row[c] && row[c] === row[c + 1]) {\n        row[c] *= 2;\n        row[c + 1] = 0;\n\n        refs.gameScore.textContent = +refs.gameScore.textContent + +row[c];\n      }\n    }\n    row = removeZeroes(row);\n    row = addZeroes(row);\n\n    transformedValues.push(row);\n  }\n\n  return transformedValues;\n}\n\nfunction slideRight(array) {\n  const transformedValues = [];\n\n  for (let r = 0; r < NUMBER_OF_ROWS; r++) {\n    let row = removeZeroes(array[r]).reverse();\n\n    for (let c = 0; c < NUMBER_OF_CELLS - 1; c++) {\n      if (row[c] && row[c] === row[c + 1]) {\n        row[c] *= 2;\n        row[c + 1] = 0;\n        refs.gameScore.textContent = +refs.gameScore.textContent + +row[c];\n      }\n    }\n\n    row = removeZeroes(row);\n    row = addZeroes(row).reverse();\n\n    transformedValues.push(row);\n  }\n\n  return transformedValues;\n}\n\nfunction rotateArray(array) {\n  const rotadedArray = [];\n\n  for (let c = 0; c < NUMBER_OF_CELLS; c++) {\n    for (let r = 0; r < NUMBER_OF_ROWS; r++) {\n      if (!rotadedArray[c]) {\n        rotadedArray[c] = [];\n      }\n      rotadedArray[c].push(array[r][c]);\n    }\n  }\n\n  return rotadedArray;\n}\n\nfunction removeZeroes(array) {\n  return array.filter((item) => item && item > 0);\n}\n\nfunction addZeroes(row) {\n  for (let c = 0; c < NUMBER_OF_CELLS; c++) {\n    if (!row[c]) {\n      row.push(0);\n    }\n  }\n\n  return row;\n}\n\nfunction hasEmptyTiles(array) {\n  return array.flatMap((el) => el).filter((tile) => tile === 0).length > 0;\n}\n\nfunction updateTiles(array) {\n  let currentTile = 0;\n\n  for (let r = 0; r < NUMBER_OF_ROWS; r++) {\n    for (let c = 0; c < NUMBER_OF_CELLS; c++) {\n      updateTile(refs.tiles[currentTile], array[r][c]);\n      currentTile++;\n    }\n  }\n}\n\nfunction clearGameField() {\n  [...refs.tiles].forEach((tile) => {\n    tile.textContent = '';\n    tile.className = 'field-cell';\n  });\n}\n\nfunction isGameWon() {\n  return [...refs.tiles].some((tile) => +tile.textContent === WIN_VALUE);\n}\n"],"names":["$09e991522ca7e64e$var$refs","tiles","document","querySelectorAll","startBtn","querySelector","gameScore","gameStartMsg","gameOverMsg","gameWonMsg","$09e991522ca7e64e$var$boardValues","$09e991522ca7e64e$var$getFieldValues","$09e991522ca7e64e$var$generateRandomTiles","numberOfTiles","generated","randomTileIndex","Math","floor","random","length","tile","textContent","$09e991522ca7e64e$var$updateTile","$09e991522ca7e64e$var$hasMoves","array","r","c","$09e991522ca7e64e$var$NUMBER_OF_CELLS","currentCellIndex","values","push","number","className","$09e991522ca7e64e$var$moveTiles","e","slideResult","key","moved","$09e991522ca7e64e$var$slideLeft","$09e991522ca7e64e$var$slideRight","$09e991522ca7e64e$var$rotateArray","$09e991522ca7e64e$var$checkIfEqual","original","updated","$09e991522ca7e64e$var$updateTiles","currentTile","some","classList","remove","window","removeEventListener","$09e991522ca7e64e$var$hasEmptyTiles","$09e991522ca7e64e$var$canMove","rotatedArray","emptyCells","canMoveHorizontally","canMoveVertically","transformedValues","row","$09e991522ca7e64e$var$removeZeroes","$09e991522ca7e64e$var$addZeroes","reverse","rotadedArray","filter","item","flatMap","el","addEventListener","forEach","add"],"version":3,"file":"index.aa60c615.js.map"}